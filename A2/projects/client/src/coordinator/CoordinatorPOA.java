package coordinator;


/**
* coordinator/CoordinatorPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from coordinator.idl
* Samstag, 9. Mai 2015 17:50 Uhr MESZ
*/

public abstract class CoordinatorPOA extends org.omg.PortableServer.Servant
 implements coordinator.CoordinatorOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("register", new java.lang.Integer (0));
    _methods.put ("inform", new java.lang.Integer (1));
    _methods.put ("getStarter", new java.lang.Integer (2));
    _methods.put ("calculate", new java.lang.Integer (3));
    _methods.put ("kill", new java.lang.Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
       * Register a ggT Prozess (Worker) at coordinator side
       * @param whom    Identifier of ggT Prozess (Worker)
       */
       case 0:  // coordinator/Coordinator/register
       {
         String whom = in.read_string ();
         this.register (whom);
         out = $rh.createReply();
         break;
       }


  /**
       * Called from a ggT prozess to inform about current state
       * @param whom      Identifier of ggT Prozess (Worker)
       * @param seqNr     Sequenz Number
       * @param finished  TRUE  when ggT is finished
       *                  FALSE when ggT is not finished
       * @param current   Last calculated ggT, if finished is TRUE this value
       *                  represent the result
       */
       case 1:  // coordinator/Coordinator/inform
       {
         String whom = in.read_string ();
         int seqNr = in.read_long ();
         boolean finished = in.read_boolean ();
         int current = in.read_long ();
         this.inform (whom, seqNr, finished, current);
         out = $rh.createReply();
         break;
       }


  /**
       * Returns a list of all starters
       * @returns the names of available starts
       *          this is a list over strings
       */
       case 2:  // coordinator/Coordinator/getStarter
       {
         String $result[] = null;
         $result = this.getStarter ();
         out = $rh.createReply();
         coordinator.starterNamesHelper.write (out, $result);
         break;
       }


  /**
       * Kick off a calculation
       * @param monitor     Name of monitor
       * @param ggTLower    Lower interval for ggT prozess count (Workers)
       * @param ggTUpper    Upper interval for ggT Prozess count (Workers)
       * @param delayLower  Lower interval for delay (is this really needed?)
       * @param delayUpper  Upper interval for delay
       * @param period      Period for system state
       * @param expectedggt Expected ggT
       */
       case 3:  // coordinator/Coordinator/calculate
       {
         String monitor = in.read_string ();
         int ggTLower = in.read_long ();
         int ggTUpper = in.read_long ();
         int delayLower = in.read_long ();
         int delayUpper = in.read_long ();
         int period = in.read_long ();
         int expectedggT = in.read_long ();
         this.calculate (monitor, ggTLower, ggTUpper, delayLower, delayUpper, period, expectedggT);
         out = $rh.createReply();
         break;
       }


  /**
       * Kills a starter, the starter has to terminate all of its child prozesses
       * @param whom Identifier of starter
       */
       case 4:  // coordinator/Coordinator/kill
       {
         String whom = in.read_string ();
         this.kill (whom);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:coordinator/Coordinator:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Coordinator _this() 
  {
    return CoordinatorHelper.narrow(
    super._this_object());
  }

  public Coordinator _this(org.omg.CORBA.ORB orb) 
  {
    return CoordinatorHelper.narrow(
    super._this_object(orb));
  }


} // class CoordinatorPOA
