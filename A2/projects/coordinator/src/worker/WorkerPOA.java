package worker;


/**
* worker/WorkerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from worker.idl
* Dienstag, 2. Juni 2015 17:45 Uhr MESZ
*/

public abstract class WorkerPOA extends org.omg.PortableServer.Servant
 implements worker.WorkerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("init", new java.lang.Integer (0));
    _methods.put ("shareResult", new java.lang.Integer (1));
    _methods.put ("snapshot", new java.lang.Integer (2));
    _methods.put ("kill", new java.lang.Integer (3));
    _methods.put ("getName", new java.lang.Integer (4));
    _methods.put ("start", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
       * Initialize the worker with values
       * @param left  Identifier for left worker
       * @param right Identifier for right worker
       * @param value Start value for caluclation
       * @param delay Maximum delay 14:27
       * @param Identifier for monitor
       */
       case 0:  // worker/Worker/init
       {
         String left = in.read_string ();
         String right = in.read_string ();
         int value = in.read_long ();
         int delay = in.read_long ();
         String monitor = in.read_string ();
         this.init (left, right, value, delay, monitor);
         out = $rh.createReply();
         break;
       }


  /**
       * Called from another worker to share its result with left and right worker
       * @param sender Identifier of worker who send this request
       * @param value  Value of result to share
       */
       case 1:  // worker/Worker/shareResult
       {
         String sender = in.read_string ();
         int value = in.read_long ();
         this.shareResult (sender, value);
         out = $rh.createReply();
         break;
       }


  /**
       * Send a snapshot request to worker
       * @param sender The sender of the marker
       */
       case 2:  // worker/Worker/snapshot
       {
         String sender = in.read_string ();
         this.snapshot (sender);
         out = $rh.createReply();
         break;
       }


  /**
       * Kill the ggT Prozess (Worker)
       */
       case 3:  // worker/Worker/kill
       {
         this.kill ();
         out = $rh.createReply();
         break;
       }


  /**
       * @returns the name of the worker as string
       */
       case 4:  // worker/Worker/getName
       {
         String $result = null;
         $result = this.getName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
       * Actually start the underlying thread
       * if the thread is already started, this is a nop
       */
       case 5:  // worker/Worker/start
       {
         this.start ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:worker/Worker:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Worker _this() 
  {
    return WorkerHelper.narrow(
    super._this_object());
  }

  public Worker _this(org.omg.CORBA.ORB orb) 
  {
    return WorkerHelper.narrow(
    super._this_object(orb));
  }


} // class WorkerPOA
